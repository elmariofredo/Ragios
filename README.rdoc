=Ragios (Saint Ruby)


While reading the book “Nagios: system and Network Monitoring” by Wolfgang Barth, I thought it will be a good idea to write a Ruby based Object Oriented System and Network Monitoring tool similar to Nagios.

So I started writing such a tool. Since it was inspired by Nagios, I will call it Ragios (Ruby Agios) aka Saint Ruby (St. Ruby) since Agios is Saint in Greek.

This is all just for fun and educational purposes.

Ragios could be used to monitor any type of system including servers, workstations, switches, routers, system services and applications, locally or over a network. The system admin can define the tests he wants to run on the system or re-use tests written by other developers. The tests run periodically on the system. When a test fails the admin receives an email or SMS alert from Ragios. Everything is written in ruby, the configuration settings are all in ruby syntax. The Ragios system itself is written in ruby.


==Installation
I assume you are using a linux/unix system (Most likely debian/Ubuntu). However, Ragios is written in ruby so it can on any platform that supports ruby including BSD, OS X, any Linux distro, Windows etc..

Download Ragios using the link below :

https://github.com/obi-a/Ragios/tarball/release

Paste the URL on a browser address bar, it will download a zip file named something like this :

obi-a-Ragios-b231813.tar.gz 

From terminal, Unzip the file :

   $tar xvfz obi-a-Ragios-b231813.tar.gz

Rename the unzipped folder to ragios : 

   $mv obi-a-Ragios-b231813 ragios

Change directory to the ragios directory :

   $cd ragios

Install the bundler rubygem :

   $sudo gem install bundler

Ragios uses bundler to manage dependencies. Bundler will install the right version of all the gems required for Ragios to run on your system.

Now while inside the ragios directory, run Bundler to install all the required gems and dependencies :
   
   $sudo bundle install

Installation is complete! Ragios is ready to use. 

==Usage

Ragios is used by developers and system admins to monitor their web apps and systems. The sys admin configures Ragios to run tests on the system at a specified time interval. The system admin may write his own tests or use the built-in tests that comes with the system. The tests are written in Ruby so they can do anything that ruby can do. A test may either PASS or FAIL when a test FAILS the system admin is notified. 

===Monitoring a system
To monitor a system we need to configure Ragios. 

===Using the built-in tests
These are some tests I wrote, I will write more built-in tests soon. 

===To monitor a website we use TestHttp
This test tries to establish a Http connection with the website at the specified time interval. It notifies the system admin when its unable to establish a connection. 

To use TestHttp, we need to write a custom test that extends the TestHttp Object. This custom test is added to the /ragios/main.rb script.
 
Below is a custom test to alert me when my blog goes offline

	class TestMySite < Ragios::Monitors::TestHTTP
   	 def initialize
     	    @time_interval = '10m'
            @notification_interval = '6h'
            @contact = "obi@mail.com"
            @test_description = "Http connection to my blog"
            @test_domain = "obi-akubue.org"
            super
         end

       def notify   
        email_notify
        #gmail_notify
        #tweet_notify
       end

      end

Ragios::Monitors::TestHTTP is the built-in test we use to monitor a website. 

@test_domain is the domain of the website we want to monitor

   @test_domain = "obi-akubue.org"

@test_description is a summary of what we are testing, this helps the Ragios system send out notification alerts with specific details on what went wrong in the system.

   @test_description = "Http connection to my blog"

@contact is the email address of the system admin. When a test fails Ragios will send an email notification with details of the failure to the System admin. 
 
   @contact = "obi@mail.com" 

This could be omitted when we use other forms of notification like SMS, IM or Twitter.

@time_interval is the time interval in which Ragios performs the test on the system. In the example above, 

  @time_interval = '10m' 

means Ragios will run TestHTTP every 10minutes to monitor my blog. @time_interval could be in seconds, minutes, hours or combined.


Example

	@time_interval = '3m'  #means the test will be performed every 3 minutes
	@time_interval = '4h'  #every 4 hours
	@time_interval = '30s' #every 30 seconds
	@time_interval = '6h30m' #every 6 hours 30minutes

@notification_interval is the time interval between sending notifications to the system admin when a test is still in a failed state. In the above example, we have  

   @notification_interval = '6h'

When the website goes offline, Ragios will send out notifications to the system admin every 6 hours as long as the website is still offline. It will stop sending notifcations when the website comes back online. When a test recovers from a failed state Ragios will also inform the system admin.

@notification_intervals could be in seconds, minutes, hours or combined.


When a test fails Ragios will notify the system admin by calling the notify() method. The system has built-in notifiers for sending email and tweet notifications. To make Ragios send email notifications simply call email_notify() method inside notify(). For tweet notifications call tweet_notify(). See the notify() method below;

  def notify   
    email_notify
    #gmail_notify
    #tweet_notify
  end
 
In the above example, the system will notify the admin via email. email_notify() assumes you have sendmail installed on your system and uses it to send email. You can also use Gmail to send notifications by calling the gmail_notify() method instead. 

An email notification for the test above will look like this:

 Subject: Http connection to my blog FAILED
 
 Http connection to my blog FAILED! HTTP Connection to obi-akubue.org = getaddrinfo: Name or service not known
 Created on: Wed Sep 22 13:55:21 -0400 2010


A tweet notification will look like this:

 Http connection to my blog FAILED! HTTP Request to http://obi-akubue.org/ = getaddrinfo: Name or service not known 
 Created on: Sat Oct 16 04:48:09 -0400 201

In a test object's constructor, you should always call the super() method to ensure that the test object is fully initalized with the required properties of all the classes above it in the hierarchy. 

 super


===To monitor a URL in your web app
We use a built-in test for this called TestURL. This test sends a Http request to the URL at the specified time interval. It passes the test when it gets a 200, 301 or 302 response code from the server and FAILS when it gets any other response code from the server, it also fails when there's a request timeout or an exception.  

Below is a custom test that uses TestURL to monitor a URL on my website whisperservers.com 


     class TestBlogURL <  Ragios::Monitors::TestURL   
        def initialize
      	  @time_interval = '20m'
          @notification_interval = '6h'
          @contact = "obi@mail.com"	
          @test_description  = "My Website Test"
          @test_url = "http://www.whisperservers.com/blog/" 
          super
   	end

      def notify   
       email_notify
       #gmail_notify
       #tweet_notify
     end
      
   end


Ragios::Monitors::TestURL is the built-in test. We had to extend it for our custom test. 


===Adding Custom tests to the Ragios system
To add the custom tests we created above to the Ragios System we need add the following lines to /ragios/main.rb script.

 tests = [TestMySite.new, TestBlogURL.new] #initializes our custom tests and adds them to the list of tests

 ragios = Ragios::Schedulers::RagiosScheduler.new tests #create a ragios object and give it the list of tests to run
 ragios.init     # run all the tests sequencially to ensure the system is configured properlly
 ragios.start    # starts the ragios scheduler which will run each test at its own specified time interval
                 # and notifies the admin when a test fails

===main.rb
With the custom tests we have written so far our /ragios/main.rb script will look like this:

  #ragios/main.rb
  require 'rubygems'
  require "bundler/setup"

  require 'lib/ragios'

  class TestMySite < Ragios::Monitors::TestHTTP
    def initialize
      @time_interval = '10m'
      @notification_interval = '6h'
      @contact = "obi@mail.com"
      @test_description = "Http connection to my blog"
      @test_domain = "obi-akubue.org"
      super
    end
  
    def notify   
      email_notify
      #gmail_notify
      #tweet_notify
    end
   
  end

  class TestBlogURL <  Ragios::Monitors::TestURL   
    def initialize
      @time_interval = '20m'
      @notification_interval = '6h'
      @contact = "obi@mail.com"	
      @test_description  = "My Website Test"
      @test_url = "http://www.whisperservers.com/blog/" 
      super
    end

   def notify   
     email_notify
     #gmail_notify
     #tweet_notify
   end

   end

  tests = [TestMySite.new, TestBlogURL.new]

  ragios = Ragios::Schedulers::RagiosScheduler.new tests 
  ragios.init
  ragios.start

The basic configuration is now complete. We can now run the Ragios system.

Since main.rb is pure ruby code we can run it directly, from the /ragios directory : 

 $ruby main.rb

This will run the ragios system on our terminal as a top program. This can be useful for debugging purposes, to test our configuration script for errors.

Output from running the above main.rb script will look like this :

	Welcome to Ragios
	Initializing
	2 tests detected

	test 1. Http connection to my blog
	Scheduled to run every 10m
	Running First Test...
  	  [PASSED] Created on: Thu Nov 18 14:14:49 -0500 2010
	HTTP Connection to obi-akubue.org = PASSED

	test 2. My Website Test
	Scheduled to run every 20m
	Running First Test...
  	  [PASSED] Created on: Thu Nov 18 14:15:02 -0500 2010
	HTTP Request to http://www.whisperservers.com/blog/ = 200

	PRESS CTRL-C to QUIT

We can also run Ragios as a daemon by running the ragiosd ruby script also in the /ragios directory. 

===Starting the Ragios System
Ragios runs as a daemon in the unix/linux system. 

To Start Ragios as a daemon from the terminal :

	$ruby ragiosd start

Stop the daemon :

	$ruby ragiosd stop

Restart the daemon :

	$ruby ragiosd restart

Check Status of the daemon :

	$ruby ragiosd status

To run Ragios as a top program, useful for testing purposes :

	$ruby ragiosd run

The ragiosd script simply demonizes the /ragios/main.rb script and runs it as a daemon. The logs and output of the daemon is saved in the /ragios/log directory as ragios.log and ragios.output respectively.

===Notifications
When a test fails Ragios sends out notifications by calling the notify method of the test object that failed. 

===Sending Notifications via Sendmail
If you have sendmail installed on your unix/linux system you can use it to send out notifications by simply calling email_notify() from the notify() method of your test object. Example;


  class TestMySite < Ragios::Monitors::TestHTTP
    def initialize
      @time_interval = '10m'
      @notification_interval = '6h'
      @contact = "obi@mail.com"
      @test_description = "Http connection to my blog"
      @test_domain = "obi-akubue.org"
      super
    end
  
    def notify   
      email_notify
    end
   
  end

The method below 

    def notify   
      email_notify
    end

ensures that the notification will be sent out via sendmail.


===Sending Notifications via Gmail
First create a Gmail account for the Ragios system. Ragios will send out email notifications using this Gmail account.

Edit the script /ragios/lib/ragios/notifiers/gmail_notifier.rb, replace the line below with the username & password of the Gmail account you created.

  @username = 'gmail_username'  #replace with gmail username
  @password =  'gmail_password' #replace with gmail password

To make our custom test use Gmail, we just need to call gmail_notify() from the notify() method of the test object. See below;

  class TestMySite < Ragios::Monitors::TestHTTP
    def initialize
      @time_interval = '10m'
      @notification_interval = '6h'
      @contact = "obi@mail.com"
      @test_description = "Http connection to my blog"
      @test_domain = "obi-akubue.org"
      super
    end
  
    def notify   
      gmail_notify
    end
   
  end

This 

 def notify   
   gmail_notify
 end

ensures that the notifications will be sent via the Gmail account you added to the system. The system admin will receive email notification sent from that gmail account.

===Sending Notifications via Twitter
First you need to create and register a twitter app at http://twitter.com/apps/new. This is the app Ragios will use to tweet the notifications. After you register the App, Twitter will give you a consumer_key and a consumer_secret. We will use them later.

Next you need to create a new twitter account for the Ragios system. This is the Twitter account that will tweet the notifications. To receive the tweets the system admin should follow this account. The account should be set to private on twitter.

After you create the account, you need to grant your registered twitter app access to it.

To do this you need to install the oauth rubygem

 sudo gem install oauth

 The ruby script below will do the trick, copy and run the script on your system: 

  #twitter_auth.rb
  #!/usr/bin/ruby
  require 'rubygems'
  require 'oauth'
 
  consumer = OAuth::Consumer.new(
    'consumer key',
    'consumer secret',
    {:site => 'http://twitter.com'}
  )
 
  request_token = consumer.get_request_token
 
  puts "Twitter App Authorize URL \n" + request_token.authorize_url
  puts "Enter PIN:"
  pin = STDIN.readline.chomp
 
  access_token = request_token.get_access_token(:oauth_verifier => pin)
 
  puts "access token: " + access_token.token
  puts "access secret: " + access_token.secret


Use the ‘consumer_key’ and ‘consumer secret’ Twitter generated for your app earlier. Add it to these lines in the script: 

	consumer = OAuth::Consumer.new(
    	    'consumer key',
    	    'consumer secret',
        {:site => 'http://twitter.com'}
       )

When you run the script it will display an authorization URL, this is the url that you will use to ALLOW or DENY your twitter app access to the Twitter account you created for ragios. Open the authorization URL in a web browser, choose ALLOW to grant access to your twitter app. Twitter will give you a PIN number, enter that PIN number on the prompt displayed by the ruby script. The script will now display your access_token and access_secret. The access_token and access_secret is all Ragios needs to gain read and write access to the twitter account.

Now open the tweet_notifier.rb script located in /ragios/lib/ragios/notifiers directory. This is the script that Ragios uses to tweet the notification messages. Replace the lines below from the script with the real values for the access_token, access_secret, consumer key and consumer secret. 

      oauth = Twitter::OAuth.new('Consumer Key', 'Consumer secret')
      oauth.authorize_from_access('access token', 'access secret')   
          

Now to write a test that sends out tweet notifications, we just call tweet_notify() from the notify() method. See example below:

 class TestMySite < Ragios::Monitors::TestHTTP
    def initialize
      @time_interval = '10m'
      @notification_interval = '6h'
      @contact = "obi@mail.com"
      @test_description = "Http connection to my blog"
      @test_domain = "obi-akubue.org"
      super
    end
  
    def notify   
     tweet_notify
    end
   
 end


Having, 

   def notify   
     tweet_notify
   end

ensures that this test object will tweet all notifications.


Thanks for reading. I will write more soon.    

===Great Gems that made this possible;
Bundler,
Pony, 
Twitter, 
Oauth, 
Rufus-scheduler, 
Gmail.

===License
MIT License.
Copyright (c) 2010 Obi Akubue, obi-akubue.org








